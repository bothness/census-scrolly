{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Box.svelte",
    "Chart.svelte",
    "Grid.svelte",
    "Point.svelte",
    "Svg.svelte",
    "LayerCake.svelte",
    "Html.svelte",
    "ScaledSvg.svelte",
    "Svg.svelte",
    "App.svelte",
    "AxisX.svelte",
    "AxisY.svelte",
    "ColChart.svelte",
    "Line.svelte",
    "LineChart.svelte",
    "Main.svelte",
    "Map.svelte",
    "PopChart.svelte",
    "Section.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { getChartContext } from './Chart.svelte';\n\n\texport let x1 = 0;\n\texport let x2 = 1;\n\texport let y1 = 0;\n\texport let y2 = 1;\n\n\tconst { x_scale, y_scale } = getChartContext();\n\n\tlet style; $: {\n\t\tconst _x1 = $x_scale(x1);\n\t\tconst _x2 = $x_scale(x2);\n\t\tconst _y1 = $y_scale(y1);\n\t\tconst _y2 = $y_scale(y2);\n\n\t\tconst left   = Math.min(_x1, _x2);\n\t\tconst right  = Math.max(_x1, _x2);\n\t\tconst top    = Math.min(_y1, _y2);\n\t\tconst bottom = Math.max(_y1, _y2);\n\n\t\tconst width = right - left;\n\t\tconst height = bottom - top;\n\n\t\tstyle = `left: ${left}%; bottom: ${100 - bottom}%; width: ${right - left}%; height: ${height}%;`;\n\t};\n</script>\n\n<div class=\"pancake-box\" style={style}>\n\t<slot></slot>\n</div>\n\n<style>\n\t.pancake-box {\n\t\tposition: absolute;\n\t}\n</style>",
    "<script context=\"module\">\n\timport { getContext } from 'svelte';\n\n\tconst key = {};\n\n\texport function getChartContext() {\n\t\treturn getContext(key);\n\t}\n</script>\n\n<script>\n\timport { setContext, onDestroy } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\timport * as yootils from 'yootils';\n\n\texport let x1 = 0;\n\texport let y1 = 0;\n\texport let x2 = 1;\n\texport let y2 = 1;\n\texport let clip = false;\n\n\tlet chart;\n\n\tconst _x1 = writable();\n\tconst _y1 = writable();\n\tconst _x2 = writable();\n\tconst _y2 = writable();\n\n\tconst width = writable();\n\tconst height = writable();\n\tconst pointer = writable(null);\n\n\tconst handle_mousemove = e => {\n\t\tconst bcr = chart.getBoundingClientRect();\n\t\tconst left = e.clientX - bcr.left;\n\t\tconst top = e.clientY - bcr.top;\n\n\t\tconst x = $x_scale_inverse(100 * left / (bcr.right - bcr.left));\n\t\tconst y = $y_scale_inverse(100 * top / (bcr.bottom - bcr.top));\n\n\t\tpointer.set({ x, y, left, top });\n\t};\n\n\tconst handle_mouseleave = () => {\n\t\tpointer.set(null);\n\t};\n\n\t$: _x1.set(x1);\n\t$: _y1.set(y1);\n\t$: _x2.set(x2);\n\t$: _y2.set(y2);\n\n\tconst x_scale = derived([_x1, _x2], ([$x1, $x2]) => {\n\t\treturn yootils.linearScale([$x1, $x2], [0, 100]);\n\t});\n\n\tconst y_scale = derived([_y1, _y2], ([$y1, $y2]) => {\n\t\treturn yootils.linearScale([$y1, $y2], [100, 0]);\n\t});\n\n\tconst x_scale_inverse = derived(x_scale, $x_scale => $x_scale.inverse());\n\tconst y_scale_inverse = derived(y_scale, $y_scale => $y_scale.inverse());\n\n\tsetContext(key, {\n\t\tx1: _x1,\n\t\ty1: _y1,\n\t\tx2: _x2,\n\t\ty2: _y2,\n\t\tx_scale,\n\t\ty_scale,\n\t\tx_scale_inverse,\n\t\ty_scale_inverse,\n\t\tpointer,\n\t\twidth,\n\t\theight\n\t});\n</script>\n\n<div\n\tclass=\"pancake-chart\"\n\tbind:this={chart}\n\tbind:clientWidth={$width}\n\tbind:clientHeight={$height}\n\ton:mousemove={handle_mousemove}\n\ton:mouseleave={handle_mouseleave}\n\tclass:clip\n>\n\t<slot></slot>\n</div>\n\n<style>\n\t.pancake-chart {\n\t\tposition: relative;\n\t\tdisplay: block;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n\n\t.clip {\n\t\toverflow: hidden;\n\t}\n</style>",
    "<script>\n\timport { getChartContext } from './Chart.svelte';\n\timport { get_ticks } from '../utils/ticks.mjs';\n\n\texport let count = undefined;\n\texport let ticks = undefined;\n\texport let horizontal = false;\n\texport let vertical = false;\n\n\tconst { x1, y1, x2, y2, x_scale, y_scale } = getChartContext();\n\n\tconst VERTICAL = {};\n\tconst HORIZONTAL = {};\n\n\t$: orientation = vertical ? VERTICAL : HORIZONTAL;\n\n\t$: if (horizontal && vertical) {\n\t\tconsole.error(`<Grid> must specify either 'horizontal' or 'vertical' orientation`);\n\t}\n\n\t$: _ticks = ticks || (orientation === HORIZONTAL\n\t\t? get_ticks($y1, $y2, count)\n\t\t: get_ticks($x1, $x2, count));\n\n\t$: style = orientation === HORIZONTAL\n\t\t? (n, i) => `width: 100%; height: 0; top: ${$y_scale(n, i)}%`\n\t\t: (n, i) => `width: 0; height: 100%; left: ${$x_scale(n, i)}%`;\n</script>\n\n<div class=\"pancake-grid\">\n\t{#each _ticks as tick, i}\n\t\t<div class=\"pancake-grid-item\" style={style(tick, i)}>\n\t\t\t<slot value={tick} first={i === 0} last={i === _ticks.length - 1}></slot>\n\t\t</div>\n\t{/each}\n</div>\n\n<style>\n\t.pancake-grid-item {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 0;\n\t}\n</style>",
    "<script>\n\timport { getChartContext } from './Chart.svelte';\n\n\tconst { x_scale, y_scale } = getChartContext();\n\n\texport let x;\n\texport let y;\n</script>\n\n<div class=\"pancake-point\" style=\"left: {$x_scale(x)}%; top: {$y_scale(y)}%\">\n\t<slot></slot>\n</div>\n\n<style>\n\t.pancake-point {\n\t\tposition: absolute;\n\t\twidth: 0;\n\t\theight: 0;\n\t}\n</style>",
    "<script>\n\texport let clip = false;\n</script>\n\n<svg viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\" class:clip>\n\t<slot></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\n\t.clip {\n\t\toverflow: hidden;\n\t}\n\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n\n",
    "<script>\n\timport { setContext } from 'svelte';\n\timport { writable, derived } from 'svelte/store';\n\n\timport makeAccessor from './utils/makeAccessor.js';\n\timport filterObject from './utils/filterObject.js';\n\timport calcExtents from './lib/calcExtents.js';\n\timport calcDomain from './helpers/calcDomain.js';\n\timport createScale from './helpers/createScale.js';\n\timport createGetter from './helpers/createGetter.js';\n\timport getRange from './helpers/getRange.js';\n\timport defaultScales from './settings/defaultScales.js';\n\timport defaultReverses from './settings/defaultReverses.js';\n\n\texport let ssr = false;\n\texport let pointerEvents = true;\n\texport let position = 'relative';\n\texport let percentRange = false;\n\n\texport let width = undefined;\n\texport let height = undefined;\n\n\texport let containerWidth = width || 100;\n\texport let containerHeight = height || 100;\n\n\t/* --------------------------------------------\n\t * Parameters\n\t * Values that computed properties are based on and that\n\t * can be easily extended from config values\n\t *\n\t */\n\texport let x = undefined;\n\texport let y = undefined;\n\texport let z = undefined;\n\texport let r = undefined;\n\texport let custom = {};\n\texport let data = [];\n\texport let xDomain = undefined;\n\texport let yDomain = undefined;\n\texport let zDomain = undefined;\n\texport let rDomain = undefined;\n\texport let xNice = false;\n\texport let yNice = false;\n\texport let zNice = false;\n\texport let rNice = false;\n\texport let xReverse = defaultReverses.x;\n\texport let yReverse = defaultReverses.y;\n\texport let zReverse = defaultReverses.z;\n\texport let rReverse = defaultReverses.r;\n\texport let xPadding = undefined;\n\texport let yPadding = undefined;\n\texport let zPadding = undefined;\n\texport let rPadding = undefined;\n\texport let xScale = defaultScales.x;\n\texport let yScale = defaultScales.y;\n\texport let zScale = defaultScales.y;\n\texport let rScale = defaultScales.r;\n\texport let xRange = undefined;\n\texport let yRange = undefined;\n\texport let zRange = undefined;\n\texport let rRange = undefined;\n\texport let padding = {};\n\texport let extents = {};\n\texport let flatData = undefined;\n\n\t/* --------------------------------------------\n\t * Preserve a copy of our passed in settings before we modify them\n\t * Return this to the user's context so they can reference things if need be\n\t * Add the active keys since those aren't on our settings object.\n\t * This is mostly an escape-hatch\n\t */\n\tconst config = {};\n\t$: if (x) config.x = x;\n\t$: if (y) config.y = y;\n\t$: if (z) config.z = z;\n\t$: if (r) config.r = r;\n\t$: if (xDomain) config.xDomain = xDomain;\n\t$: if (yDomain) config.yDomain = yDomain;\n\t$: if (zDomain) config.zDomain = zDomain;\n\t$: if (rDomain) config.rDomain = rDomain;\n\t$: if (xRange) config.xRange = xRange;\n\t$: if (yRange) config.yRange = yRange;\n\t$: if (zRange) config.zRange = zRange;\n\t$: if (rRange) config.rRange = rRange;\n\n\t/* --------------------------------------------\n\t * Make store versions of each parameter\n\t * Prefix these with `_` to keep things organized\n\t */\n\tconst _percentRange = writable();\n\tconst _containerWidth = writable();\n\tconst _containerHeight = writable();\n\tconst _x = writable();\n\tconst _y = writable();\n\tconst _z = writable();\n\tconst _r = writable();\n\tconst _custom = writable();\n\tconst _data = writable();\n\tconst _xDomain = writable();\n\tconst _yDomain = writable();\n\tconst _zDomain = writable();\n\tconst _rDomain = writable();\n\tconst _xNice = writable();\n\tconst _yNice = writable();\n\tconst _zNice = writable();\n\tconst _rNice = writable();\n\tconst _xReverse = writable();\n\tconst _yReverse = writable();\n\tconst _zReverse = writable();\n\tconst _rReverse = writable();\n\tconst _xPadding = writable();\n\tconst _yPadding = writable();\n\tconst _zPadding = writable();\n\tconst _rPadding = writable();\n\tconst _xScale = writable();\n\tconst _yScale = writable();\n\tconst _zScale = writable();\n\tconst _rScale = writable();\n\tconst _xRange = writable();\n\tconst _yRange = writable();\n\tconst _zRange = writable();\n\tconst _rRange = writable();\n\tconst _padding = writable();\n\tconst _flatData = writable();\n\tconst _extents = writable();\n\tconst _config = writable(config);\n\n\t$: _percentRange.set(percentRange);\n\t$: _containerWidth.set(containerWidth);\n\t$: _containerHeight.set(containerHeight);\n\t$: _x.set(makeAccessor(x));\n\t$: _y.set(makeAccessor(y));\n\t$: _z.set(makeAccessor(z));\n\t$: _r.set(makeAccessor(r));\n\t$: _xDomain.set(xDomain);\n\t$: _yDomain.set(yDomain);\n\t$: _zDomain.set(zDomain);\n\t$: _rDomain.set(rDomain);\n\t$: _custom.set(custom);\n\t$: _data.set(data);\n\t$: _xNice.set(xNice);\n\t$: _yNice.set(yNice);\n\t$: _zNice.set(zNice);\n\t$: _rNice.set(rNice);\n\t$: _xReverse.set(xReverse);\n\t$: _yReverse.set(yReverse);\n\t$: _zReverse.set(zReverse);\n\t$: _rReverse.set(rReverse);\n\t$: _xPadding.set(xPadding);\n\t$: _yPadding.set(yPadding);\n\t$: _zPadding.set(zPadding);\n\t$: _rPadding.set(rPadding);\n\t$: _xScale.set(xScale);\n\t$: _yScale.set(yScale);\n\t$: _zScale.set(zScale);\n\t$: _rScale.set(rScale);\n\t$: _xRange.set(xRange);\n\t$: _yRange.set(yRange);\n\t$: _zRange.set(zRange);\n\t$: _rRange.set(rRange);\n\t$: _padding.set(padding);\n\t$: _extents.set(filterObject(extents));\n\t$: _flatData.set(flatData || data);\n\n\t/* --------------------------------------------\n\t * Create derived values\n\t * Suffix these with `_d`\n\t */\n\tconst activeGetters_d = derived([_x, _y, _z, _r], ([$x, $y, $z, $r]) => {\n\t\treturn [\n\t\t\t{ field: 'x', accessor: $x },\n\t\t\t{ field: 'y', accessor: $y },\n\t\t\t{ field: 'z', accessor: $z },\n\t\t\t{ field: 'r', accessor: $r }\n\t\t].filter(d => d.accessor);\n\t});\n\n\tconst padding_d = derived([_padding, _containerWidth, _containerHeight], ([$padding]) => {\n\t\tconst defaultPadding = { top: 0, right: 0, bottom: 0, left: 0 };\n\t\treturn Object.assign(defaultPadding, $padding);\n\t});\n\n\tconst box_d = derived([_containerWidth, _containerHeight, padding_d], ([$containerWidth, $containerHeight, $padding]) => {\n\t\tconst b = {};\n\t\tb.top = $padding.top;\n\t\tb.right = $containerWidth - $padding.right;\n\t\tb.bottom = $containerHeight - $padding.bottom;\n\t\tb.left = $padding.left;\n\t\tb.width = b.right - b.left;\n\t\tb.height = b.bottom - b.top;\n\t\tif (b.width < 0 && b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative width and height. Did you forget to set a width or height on the container?');\n\t\t} else if (b.width < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has a negative width. Did you forget to set that CSS on the container?');\n\t\t} else if (b.height < 0) {\n\t\t\tconsole.error('[LayerCake] Target div has negative height. Did you forget to set that CSS on the container?');\n\t\t}\n\t\treturn b;\n\t});\n\n\tconst width_d = derived([box_d], ([$box]) => {\n\t\treturn $box.width;\n\t});\n\n\tconst height_d = derived([box_d], ([$box]) => {\n\t\treturn $box.height;\n\t});\n\n\t/* --------------------------------------------\n\t * Calculate extents by taking the extent of the data\n\t * and filling that in with anything set by the user\n\t */\n\tconst extents_d = derived([_flatData, activeGetters_d, _extents], ([$flatData, $activeGetters, $extents]) => {\n\t\treturn { ...calcExtents($flatData, $activeGetters.filter(d => !$extents[d.field])), ...$extents };\n\t});\n\n\tconst xDomain_d = derived([extents_d, _xDomain], calcDomain('x'));\n\tconst yDomain_d = derived([extents_d, _yDomain], calcDomain('y'));\n\tconst zDomain_d = derived([extents_d, _zDomain], calcDomain('z'));\n\tconst rDomain_d = derived([extents_d, _rDomain], calcDomain('r'));\n\n\tconst xScale_d = derived([_xScale, extents_d, xDomain_d, _xPadding, _xNice, _xReverse, width_d, height_d, _xRange, _percentRange], createScale('x'));\n\tconst xGet_d = derived([_x, xScale_d], createGetter);\n\n\tconst yScale_d = derived([_yScale, extents_d, yDomain_d, _yPadding, _yNice, _yReverse, width_d, height_d, _yRange, _percentRange], createScale('y'));\n\tconst yGet_d = derived([_y, yScale_d], createGetter);\n\n\tconst zScale_d = derived([_zScale, extents_d, zDomain_d, _zPadding, _zNice, _zReverse, width_d, height_d, _zRange, _percentRange], createScale('z'));\n\tconst zGet_d = derived([_z, zScale_d], createGetter);\n\n\tconst rScale_d = derived([_rScale, extents_d, rDomain_d, _rPadding, _rNice, _rReverse, width_d, height_d, _rRange, _percentRange], createScale('r'));\n\tconst rGet_d = derived([_r, rScale_d], createGetter);\n\n\tconst xRange_d = derived([xScale_d], getRange);\n\tconst yRange_d = derived([yScale_d], getRange);\n\tconst zRange_d = derived([zScale_d], getRange);\n\tconst rRange_d = derived([rScale_d], getRange);\n\n\tconst aspectRatio_d = derived([width_d, height_d], ([$aspectRatio, $width, $height]) => {\n\t\treturn $width / $height;\n\t});\n\n\t$: context = {\n\t\tactiveGetters: activeGetters_d,\n\t\twidth: width_d,\n\t\theight: height_d,\n\t\tpercentRange: _percentRange,\n\t\taspectRatio: aspectRatio_d,\n\t\tcontainerWidth: _containerWidth,\n\t\tcontainerHeight: _containerHeight,\n\t\tx: _x,\n\t\ty: _y,\n\t\tz: _z,\n\t\tr: _r,\n\t\tcustom: _custom,\n\t\tdata: _data,\n\t\txNice: _xNice,\n\t\tyNice: _yNice,\n\t\tzNice: _zNice,\n\t\trNice: _rNice,\n\t\txReverse: _xReverse,\n\t\tyReverse: _yReverse,\n\t\tzReverse: _zReverse,\n\t\trReverse: _rReverse,\n\t\txPadding: _xPadding,\n\t\tyPadding: _yPadding,\n\t\tzPadding: _zPadding,\n\t\trPadding: _rPadding,\n\t\tpadding: padding_d,\n\t\tflatData: _flatData,\n\t\textents: extents_d,\n\t\txDomain: xDomain_d,\n\t\tyDomain: yDomain_d,\n\t\tzDomain: zDomain_d,\n\t\trDomain: rDomain_d,\n\t\txRange: xRange_d,\n\t\tyRange: yRange_d,\n\t\tzRange: zRange_d,\n\t\trRange: rRange_d,\n\t\tconfig: _config,\n\t\txScale: xScale_d,\n\t\txGet: xGet_d,\n\t\tyScale: yScale_d,\n\t\tyGet: yGet_d,\n\t\tzScale: zScale_d,\n\t\tzGet: zGet_d,\n\t\trScale: rScale_d,\n\t\trGet: rGet_d\n\t};\n\n\t$: setContext('LayerCake', context);\n</script>\n\n{#if (ssr === true || typeof window !== 'undefined')}\n\t<div\n\t\tclass=\"layercake-container\"\n\t\tstyle=\"\n\t\t\tposition:{position};\n\t\t\t{position === 'absolute' ? 'top:0;right:0;bottom:0;left:0;' : ''}\n\t\t\t{pointerEvents === false ? 'pointer-events:none;' : ''}\n\t\t\"\n\t\tbind:clientWidth={containerWidth}\n\t\tbind:clientHeight={containerHeight}\n\t>\n\t\t<slot\n\t\t\twidth={$width_d}\n\t\t\theight={$height_d}\n\t\t\taspectRatio={$aspectRatio_d}\n\t\t\tcontainerWidth={$_containerWidth}\n\t\t\tcontainerHeight={$_containerHeight}\n\t\t></slot>\n\t</div>\n{/if}\n\n<style>\n\t.layercake-container,\n\t.layercake-container :global(*) {\n\t\tbox-sizing: border-box;\n\t}\n\t.layercake-container {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<div\n\tclass=\"layercake-layout-html\"\n\tstyle=\"top: {$padding.top}px; right:{$padding.right}px; bottom:{$padding.bottom}px; left:{$padding.left}px;{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<slot></slot>\n</div>\n\n<style>\n\tdiv,\n\tslot {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let fixedAspectRatio = 1;\n\texport let viewBox = `0 0 100 ${100 / fixedAspectRatio}`;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { padding } = getContext('LayerCake');\n</script>\n\n<svg\n\t{viewBox}\n\tpreserveAspectRatio=\"none\"\n\tstyle=\"top: {$padding.top}px; right:0px; bottom:0px; left:{$padding.left}px;width:calc(100% - {($padding.left + $padding.right)}px);height:calc(100% - {($padding.top + $padding.bottom)}px);{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\n\t<slot></slot>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t}\n\tsvg :global(*) {\n\t\tvector-effect: non-scaling-stroke;\n\t}\n</style>\n",
    "<script>\n\timport { getContext } from 'svelte';\n\n\texport let viewBox = undefined;\n\texport let zIndex = undefined;\n\texport let pointerEvents = undefined;\n\n\tlet zIndexStyle = '';\n\t$: zIndexStyle = typeof zIndex !== 'undefined' ? `z-index:${zIndex};` : '';\n\n\tlet pointerEventsStyle = '';\n\t$: pointerEventsStyle = pointerEvents === false ? 'pointer-events:none;' : '';\n\n\tconst { containerWidth, containerHeight, padding } = getContext('LayerCake');\n</script>\n<svg\n\tclass=\"layercake-layout-svg\"\n\t{viewBox}\n\twidth={$containerWidth}\n\theight={$containerHeight}\n\tstyle=\"{zIndexStyle}{pointerEventsStyle}\"\n>\n\t<defs>\n\t\t<slot name=\"defs\"></slot>\n\t</defs>\n\t<g transform=\"translate({$padding.left}, {$padding.top})\">\n\t\t<slot></slot>\n\t</g>\n</svg>\n\n<style>\n\tsvg {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\toverflow: visible;\n\t}\n</style>\n",
    "<script>\n\timport Map from './Map.svelte';\n\timport Main from './Main.svelte';\n\timport Section from './Section.svelte';\n\timport MapSource from './MapSource.svelte';\n\timport MapLayer from './MapLayer.svelte';\n\timport Select from './Select.svelte';\n\timport LineChart from './LineChart.svelte';\n\timport ColChart from './ColChart.svelte';\n\timport PopChart from './PopChart.svelte';\n\t\n\timport { getDataset, getPlace, getGeodata, makeOptions, makeLookup, inViewport, navTo, adjectify, plusminus, colors, getPyramid } from './utils.js';\n\timport { mapObj, mapSources } from './stores.js';\n\t\n\t// Settings for loading datasets\n\tconst baseurl = 'https://raw.githubusercontent.com/bothness/ons-datasets/master/';\n\tconst geodata = {\n\t\turl: 'https://raw.githubusercontent.com/ONSvisual/topojson_boundaries/master/geogLA2015EW.json',\n\t\tlayer: 'LAD15merc'\n\t};\n\tconst mapstyle = 'https://bothness.github.io/ons-basemaps/data/style-omt.json';\n\tconst datasets = [\n\t\t{\n\t\t\tcode: 'popchange',\n\t\t\tsource: 'csv/single/population-value-change-all.csv'\n\t\t},\n\t\t{\n\t\t\tcode: 'agemed',\n\t\t\tsource: 'csv/single/agemed-value-2011-all.csv'\n\t\t},\n\t\t{\n\t\t\tcode: 'density',\n\t\t\tsource: 'csv/single/density-value-2011-all.csv'\n\t\t}\n\t];\n\tconst places = [\n\t\t{\n\t\t\tcode: 'E07000087',\n\t\t\tdefault: true\n\t\t},\n\t\t{\n\t\t\tcode: 'K04000001'\n\t\t}\n\t];\n\t\n\t// Variables to hold data\n\tlet data = {\n\t\tdatasets: {},\n\t\tplaces: {},\n\t\tgeojson: {},\n\t\toptions: [],\n\t\tlookup: {},\n\t\tquantiles: []\n\t};\n\tlet selected = {\n\t\tplace: null,\n\t\tdataset: null,\n\t\tsection: null\n\t};\n\tlet sections = {};\n\t\n\t// Active locations on map\n\tlet location = {\n\t\tselected: null,\n\t\thovered: null\n\t};\n\t\n\t// Loaded status for datasets\n\tlet loaded = {\n\t\tdatasets: false,\n\t\tplaces: false,\n\t\tgeojson: false,\n\t\toptions: false,\n\t\tlookup: false,\n\t\tquantiles: false\n\t};\n\t$: allLoaded = loaded.datasets && loaded.places && loaded.geojson && loaded.options && loaded.lookup && loaded.quantiles ? true : false;\n\t\n\t// Load datasets\n\tfor (let i in datasets) {\n\t\tgetDataset(baseurl + datasets[i].source)\n\t\t.then(result => {\n\t\t\tdata.datasets[datasets[i].code] = result;\n\t\t\tif (datasets[i].default) {\n\t\t\t\tselected.dataset = data.datasets[datasets[i].code];\n\t\t\t};\n\t\t\tif (i == datasets.length - 1) {\n\t\t\t\tloaded.datasets = true;\n\t\t\t}\n\t\t});\n\t}\n\t\n\t// Load topojson data to geojson object\n\tgetGeodata(geodata.url, geodata.layer)\n\t.then(result => {\n\t\tdata.geojson = result;\n\t\tloaded.geojson = true;\n\t\treturn result.features;\n\t})\n\t.then(features => {\n\t\t// Generate list of place codes & names for selector\n\t\tdata.options = makeOptions(features);\n\t\tloaded.options = true;\n\t\t\n\t\t// Generate lookup for place names\n\t\tdata.lookup = makeLookup(data.options);\n\t\tloaded.lookup = true;\n\t\t\n\t\t// Set rank quantiles based on count of features\n\t\tlet q10 = data.options.length * 0.1;\n\t\tfor (let i = 1; i < 10; i ++) {\n\t\t\tdata.quantiles.push(Math.floor(q10 * i));\n\t\t}\n\t\tdata.quantiles.push(data.options.length);\n\t\tloaded.quantiles = true;\n\t});\n\t\n\t// Load places\n\tfor (let i in places) {\n\t\tgetPlace(baseurl + 'json/place/' + places[i].code + '.json')\n\t\t.then(result => {\n\t\t\tdata.places[places[i].code] = result;\n\t\t\tif (places[i].default) {\n\t\t\t\tselected.place = places[i].code;\n\t\t\t};\n\t\t\tif (i == places.length - 1) {\n\t\t\t\tloaded.places = true;\n\t\t\t}\n\t\t});\n\t}\n\t\n\t// Listener for scroll events\n\twindow.addEventListener('scroll', function(e) {\n\t\tif (sections[0]) {\n\t\t\tfor (var i in sections) {\n\t\t  \tif (sections[i].el && inViewport(sections[i].el)) {\n\t\t\t  \tif (selected.section != sections[i]) {\n\t\t  \t\t\tselected.section = sections[i];\n\t\t\t\t\t\tif (selected.dataset != data.datasets[selected.section.dataset]) {\n\t\t\t\t\t\t\tselected.dataset = data.datasets[selected.section.dataset];\n\t\t\t\t\t\t}\n\t\t\t  \t\tnavTo(selected.section.location, $mapObj, data.geojson);\n\t\t\t\t\t\tlocation.selected = selected.section.location.geocode ? selected.section.location.geocode : null;\n\t\t\t  \t}\n\t\t\t  \tbreak;\n\t\t\t  }\n\t\t  }\n\t\t}\n\t});\n\t\n\t// Get place data when option is selected\n\t$: if (loaded.places && !data.places[selected.place]) {\n\t\tgetPlace(baseurl + 'json/place/' + selected.place + '.json')\n\t\t.then(result => {\n\t\t\tdata.places[selected.place] = result;\n\t\t});\n\t}\n\n</script>\n\n<style>\n\t:global(body) {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n</style>\n\n{#if allLoaded}\n<Main>\n\t<Section type='header' bind:data={sections[0]} dataset={null} >\n\t\t<span slot=\"title\">How our population is changing</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>This is a dynamic scrollytelling prototype with semi-automated data-driven content.</p>\n\t\t\t<p>It highlights some of the significant changes in England &amp; Wales between the 2001 and 2011 Census.</p>\n\t\t</span>\n\t</Section>\n\t<Section bind:data={sections[1]} dataset=\"popchange\" >\n\t\t<span slot=\"title\">There are more people</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>The population of England and Wales in 2011 was {data.places['K04000001'].data.age10yr.value['2011'].all.toLocaleString()}, an increase of {data.places['K04000001'].data.age10yr.value.change.all}% in the decade from 2001.</p>\n\t\t\t<LineChart data={[\n\t\t\t\t{x: 1981, y: data.places['K04000001'].data.age10yr.value['1981'].all},\n\t\t\t\t{x: 1991, y: data.places['K04000001'].data.age10yr.value['1991'].all},\n\t\t\t\t{x: 2001, y: data.places['K04000001'].data.age10yr.value['2001'].all},\n\t\t\t\t{x: 2011, y: data.places['K04000001'].data.age10yr.value['2011'].all}\n\t\t\t]} />\n\t\t</span>\n\t</Section>\n\t<Section bind:data={sections[2]} dataset=\"popchange\" location={{geocode: data.datasets.popchange.top5[0].geocode}} >\n\t\t<span slot=\"title\">Fastest growing</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>The most rapid population growth was seen in <strong>{data.lookup[data.datasets.popchange.top5[0].geocode]}</strong> (+{data.datasets.popchange.top5[0].value}%), <strong>{data.lookup[data.datasets.popchange.top5[1].geocode]}</strong> (+{data.datasets.popchange.top5[1].value}%) and <strong>{data.lookup[data.datasets.popchange.top5[2].geocode]}</strong> (+{data.datasets.popchange.top5[2].value}%).</p>\n\t\t\t<ColChart data={data.datasets.popchange.data} yMax={data.datasets.popchange.top5[0].value} yMin={data.datasets.popchange.bottom5[0].value} selected={{geocode: data.datasets.popchange.top5[0].geocode, name: data.lookup[data.datasets.popchange.top5[0].geocode]}} />\n\t\t</span>\n\t</Section>\n\t<Section bind:data={sections[3]} dataset=\"popchange\" location={{geocode: data.datasets.popchange.bottom5[0].geocode}} >\n\t\t<span slot=\"title\">Declining population</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>The areas with the fastest shrinking population were <strong>{data.lookup[data.datasets.popchange.bottom5[0].geocode]}</strong> ({data.datasets.popchange.bottom5[0].value}%), <strong>{data.lookup[data.datasets.popchange.bottom5[1].geocode]}</strong> ({data.datasets.popchange.bottom5[1].value}%) and <strong>{data.lookup[data.datasets.popchange.bottom5[2].geocode]}</strong> ({data.datasets.popchange.bottom5[2].value}%).</p>\n\t\t\t<ColChart data={data.datasets.popchange.data} yMax={data.datasets.popchange.top5[0].value} yMin={data.datasets.popchange.bottom5[0].value} selected={{geocode: data.datasets.popchange.bottom5[0].geocode, name: data.lookup[data.datasets.popchange.bottom5[0].geocode]}} />\n\t\t</span>\n\t</Section>\n\t<Section bind:data={sections[4]} dataset=\"density\" >\n\t\t<span slot=\"title\">Growing density</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>England and Wales is one of the most densely populated regions in the world. Between 2001 and 2011 the population rose from {data.places['K04000001'].data.density.value['2001'].all} to {data.places['K04000001'].data.density.value['2011'].all} people per hectare.</p>\n\t\t\t<LineChart data={[\n\t\t\t\t{x: 1981, y: data.places['K04000001'].data.density.value['1981'].all},\n\t\t\t\t{x: 1991, y: data.places['K04000001'].data.density.value['1991'].all},\n\t\t\t\t{x: 2001, y: data.places['K04000001'].data.density.value['2001'].all},\n\t\t\t\t{x: 2011, y: data.places['K04000001'].data.density.value['2011'].all}\n\t\t\t]} />\n\t\t</span>\n\t</Section>\n\t<Section bind:data={sections[5]} dataset=\"density\" location={{geocode: data.datasets.density.top5[0].geocode}} >\n\t\t<span slot=\"title\">Most densely populated</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>The areas with the highest population density were <strong>{data.lookup[data.datasets.density.top5[0].geocode]}</strong> ({data.datasets.density.top5[0].value} persons per hectare), <strong>{data.lookup[data.datasets.density.top5[1].geocode]}</strong> ({data.datasets.density.top5[1].value} persons per hectare) and <strong>{data.lookup[data.datasets.density.top5[2].geocode]}</strong> ({data.datasets.density.top5[2].value} persons per hectare).</p>\n\t\t\t<ColChart data={data.datasets.density.data} yMax={data.datasets.density.top5[0].value} yMin={data.datasets.density.bottom5[0].value} selected={{geocode: data.datasets.density.top5[0].geocode, name: data.lookup[data.datasets.density.top5[0].geocode]}} />\n\t\t</span>\n\t</Section>\n\t<Section bind:data={sections[6]} dataset=\"density\" location={{geocode: data.datasets.density.bottom5[0].geocode}} >\n\t\t<span slot=\"title\">Most sparsely populated</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>The areas with the lowest population density were <strong>{data.lookup[data.datasets.density.bottom5[0].geocode]}</strong> ({data.datasets.density.bottom5[0].value} persons per hectare), <strong>{data.lookup[data.datasets.density.bottom5[1].geocode]}</strong> ({data.datasets.density.bottom5[1].value} persons per hectare) and <strong>{data.lookup[data.datasets.density.bottom5[2].geocode]}</strong> ({data.datasets.density.bottom5[2].value} persons per hectare).</p>\n\t\t\t<ColChart data={data.datasets.density.data} yMax={data.datasets.density.top5[0].value} yMin={data.datasets.density.bottom5[0].value} selected={{geocode: data.datasets.density.bottom5[0].geocode, name: data.lookup[data.datasets.density.bottom5[0].geocode]}} />\n\t\t</span>\n\t</Section>\n\t<Section bind:data={sections[7]} dataset=\"agemed\" >\n\t\t<span slot=\"title\">People are getting older</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>The median age in England and Wales is on the rise. Whereas the median age in 2001 was {data.places['K04000001'].data.agemed.value['2001'].all} years, by 2011 it had risen to {data.places['K04000001'].data.agemed.value['2011'].all}.</p>\n\t\t\t<PopChart data={getPyramid(data.places['K04000001'].data.age10yr.value)} />\n\t\t</span>\n\t</Section>\n\t<Section bind:data={sections[8]} dataset=\"agemed\" location={{geocode: data.datasets.agemed.top5[0].geocode}} >\n\t\t<span slot=\"title\">Oldest population</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>The areas with the highest median age were <strong>{data.lookup[data.datasets.agemed.top5[0].geocode]}</strong> ({data.datasets.agemed.top5[0].value} years), <strong>{data.lookup[data.datasets.agemed.top5[1].geocode]}</strong> ({data.datasets.agemed.top5[1].value} years) and <strong>{data.lookup[data.datasets.agemed.top5[2].geocode]}</strong> ({data.datasets.agemed.top5[2].value} years).</p>\n\t\t\t<ColChart data={data.datasets.agemed.data} yMax={data.datasets.agemed.top5[0].value} yMin={data.datasets.agemed.bottom5[0].value} selected={{geocode: data.datasets.agemed.top5[0].geocode, name: data.lookup[data.datasets.agemed.top5[0].geocode]}} />\n\t\t</span>\n\t</Section>\n\t<Section bind:data={sections[9]} dataset=\"agemed\" location={{geocode: data.datasets.agemed.bottom5[0].geocode}} >\n\t\t<span slot=\"title\">Youngest population</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>The areas with the lowest median age were <strong>{data.lookup[data.datasets.agemed.bottom5[0].geocode]}</strong> ({data.datasets.agemed.bottom5[0].value} years), <strong>{data.lookup[data.datasets.agemed.bottom5[1].geocode]}</strong> ({data.datasets.agemed.bottom5[1].value} years) and <strong>{data.lookup[data.datasets.agemed.bottom5[2].geocode]}</strong> ({data.datasets.agemed.bottom5[2].value} years).</p>\n\t\t\t<ColChart data={data.datasets.agemed.data} yMax={data.datasets.agemed.top5[0].value} yMin={data.datasets.agemed.bottom5[0].value} selected={{geocode: data.datasets.agemed.bottom5[0].geocode, name: data.lookup[data.datasets.agemed.bottom5[0].geocode]}} />\n\t\t</span>\n\t</Section>\n\t<Section bind:data={sections[10]} dataset=\"agemed\" >\n\t\t<span slot=\"title\">Find your area</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>Select a local authority to see how it compares to the country as a whole.</p>\n\t\t\t<Select options={data.options} bind:selected={selected.place} message='Select a local authority' />\n\t\t</span>\n\t</Section>\n\t{#if data.places[selected.place]}\n\t<Section bind:data={sections[11]} dataset=\"popchange\" location={{geocode: selected.place}} >\n\t\t<span slot=\"title\">\n\t\t\t{#if data.places[selected.place].data.population.value['change'].all > 0}\n\t\t\tGrowing population\n\t\t\t{:else}\n\t\t\tShrinking population\n\t\t\t{/if}\n\t\t</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>\n\t\t\t\t<strong>{data.places[selected.place].name}</strong> had a population of {data.places[selected.place].data.population.value['2011'].all.toLocaleString()} on Census day 2011, {plusminus(data.places[selected.place].data.population.value['change'].all, '%')}, which was {adjectify(data.quantiles, data.places[selected.place].data.population.value_rank['change'].all, ['lower', 'higher'])} the average {data.places['K04000001'].data.population.value['change'].all}% increase across all local authorities.\n\t\t\t</p>\n\t\t\t<LineChart data={[\n\t\t\t\t{x: 1981, y: data.places[selected.place].data.age10yr.value['1981'].all},\n\t\t\t\t{x: 1991, y: data.places[selected.place].data.age10yr.value['1991'].all},\n\t\t\t\t{x: 2001, y: data.places[selected.place].data.age10yr.value['2001'].all},\n\t\t\t\t{x: 2011, y: data.places[selected.place].data.age10yr.value['2011'].all}\n\t\t\t]} />\n\t\t</span>\n\t</Section>\n\t<Section bind:data={sections[12]} dataset=\"density\" location={{geocode: selected.place}} >\n\t\t<span slot=\"title\">\n\t\t\t{#if data.places[selected.place].data.density.value_rank['2011'].all < data.quantiles[3]}\n\t\t\tLower density\n\t\t\t{:else if data.places[selected.place].data.density.value_rank['2011'].all < data.quantiles[5]}\n\t\t\tDensity\n\t\t\t{:else}\n\t\t\tHigher density\n\t\t\t{/if}\n\t\t</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>\n\t\t\t\t<strong>{data.places[selected.place].name}'s</strong> population density was {data.places[selected.place].data.density.value['2011'].all} people per hectare, {adjectify(data.quantiles, data.places[selected.place].data.density.value_rank['2011'].all, ['lower', 'higher'])} average of {data.places['K04000001'].data.density.value['2011'].all} across England and Wales.\n\t\t\t</p>\n\t\t\t<ColChart data={data.datasets.density.data} yMax={data.datasets.density.top5[0].value} yMin={data.datasets.density.bottom5[0].value} selected={{geocode: selected.place, name: data.lookup[selected.place]}} />\n\t\t</span>\n\t</Section>\n\t<Section bind:data={sections[13]} dataset=\"agemed\" location={{geocode: selected.place}} >\n\t\t<span slot=\"title\">\n\t\t\t{#if data.places[selected.place].data.agemed.value_rank['2011'].all < data.quantiles[3]}\n\t\t\tYounger population\n\t\t\t{:else if data.places[selected.place].data.agemed.value_rank['2011'].all < data.quantiles[5]}\n\t\t\tAge\n\t\t\t{:else}\n\t\t\tOlder population\n\t\t\t{/if}\n\t\t</span>\n\t\t<span slot=\"description\">\n\t\t\t<p>\n\t\t\t\tThe median age of <strong>{data.places[selected.place].name}</strong> is {adjectify(data.quantiles, data.places[selected.place].data.agemed.value_rank['2011'].all, ['younger', 'older'])} the average across local authorities, with a median age of {data.places[selected.place].data.agemed.value['2011'].all} years ({data.places['K04000001'].data.agemed.value['2011'].all} years average), {plusminus(data.places[selected.place].data.agemed.value['2011'].all - data.places[selected.place].data.agemed.value['2001'].all, ' years', ' year')}.\n\t\t\t</p>\n\t\t\t<PopChart data={getPyramid(data.places[selected.place].data.age10yr.value)} />\n\t\t</span>\n\t</Section>\n\t{/if}\n</Main>\n\n<Map style={mapstyle}>\n\t<MapSource id=\"lad\" type=\"geojson\" data={data.geojson} promoteId=\"AREACD\" />\n\t{#if $mapSources.includes(\"lad\")}\n\t<MapLayer id=\"fill\" source=\"lad\" type=\"fill\" data={selected.dataset} />\n\t<MapLayer id=\"boundaries\" source=\"lad\" type=\"line\" selected={location.selected} paint=\"{{\n\t'line-color': 'rgb(0, 0, 0)',\n\t'line-width': ['case',\n\t  ['==', ['feature-state','selected'], true],\n\t  3,\n\t  0.5\n\t],\n\t'line-opacity': ['case',\n\t  ['==', ['feature-state','selected'], true],\n\t  1,\n\t  0.3\n\t]\n\t}}\" />\n\t{/if}\n</Map>\n{/if}",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { width, height, xScale, yScale, yRange } = getContext('LayerCake');\n\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let baseline = false;\n\texport let snapTicks = false;\n\texport let ticks = undefined;\n\texport let xTick = undefined;\n\texport let yTick = 16;\n\texport let dxTick = 0;\n\texport let dyTick = 0;\n\n\t$: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$xScale.domain() :\n\t\t\t$xScale.ticks(ticks);\n\n\tfunction textAnchor(i) {\n\t\tif (snapTicks === true) {\n\t\t\tif (i === 0) {\n\t\t\t\treturn 'start';\n\t\t\t}\n\t\t\tif (i === tickVals.length - 1) {\n\t\t\t\treturn 'end';\n\t\t\t}\n\t\t}\n\t\treturn 'middle';\n\t}\n</script>\n\n<g class='axis x-axis'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0 }\"\n\t\t\t\ty='{yTick}'\n\t\t\t\tdx='{dxTick}'\n\t\t\t\tdy='{dyTick}'\n\t\t\t\ttext-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n\t\t</g>\n\t{/each}\n\t{#if baseline === true}\n\t\t<line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n\t{/if}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t}\n\n\tline,\n\t.tick line {\n\t\tstroke: #aaa;\n\t\tstroke-dasharray: 2;\n\t}\n\n\t.tick text {\n\t\tfill: #666;\n\t}\n\n\t.baseline {\n\t\tstroke-dasharray: 0;\n\t}\n</style>",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { padding, xRange, xScale, yScale } = getContext('LayerCake');\n\n\texport let ticks = 4;\n\texport let gridlines = true;\n\texport let formatTick = d => d;\n\texport let xTick = 0;\n\texport let yTick = 0;\n\texport let dxTick = 0;\n\texport let dyTick = -4;\n\texport let textAnchor = 'start';\n\n\t$: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n\t$: tickVals = Array.isArray(ticks) ? ticks :\n\t\tisBandwidth ?\n\t\t\t$yScale.domain() :\n\t\t\t$yScale.ticks(ticks);\n</script>\n\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\n\t{#each tickVals as tick, i}\n\t\t<g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\n\t\t\t{#if gridlines !== false}\n\t\t\t\t<line\n\t\t\t\t\tx2='100%'\n\t\t\t\t\ty1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t\ty2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n\t\t\t\t></line>\n\t\t\t{/if}\n\t\t\t<text\n\t\t\t\tx='{xTick}'\n\t\t\t\ty='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\n\t\t\t\tdx='{isBandwidth ? -5 : dxTick}'\n\t\t\t\tdy='{isBandwidth ? 4 : dyTick}'\n\t\t\t\tstyle=\"text-anchor:{isBandwidth ? 'end' : textAnchor};\"\n\t\t\t>{formatTick(tick)}</text>\n\t\t</g>\n\t{/each}\n</g>\n\n<style>\n\t.tick {\n\t\tfont-size: .725em;\n\t}\n\n\t.tick line {\n\t\tstroke: #aaa;\n\t\tstroke-dasharray: 2;\n\t}\n\n\t.tick text {\n\t\tfill: #666;\n\t}\n\n\t.tick.tick-0 line {\n\t\tstroke-dasharray: 0;\n\t}\n</style>",
    "<script>\n\t// \tNote: Due to REPL limitations, full responsiveness may not work here. Download the example from here or from the website (https://layercake.graphics/example/Column) and run locally to get all features.\n\t\n\timport { LayerCake, Svg, Html } from 'layercake';\n\timport { scaleBand } from 'd3-scale';\n\n\timport Column from './Column.svelte';\n\timport AxisX from './AxisX.svelte';\n\timport AxisY from './AxisY.svelte';\n\n\texport let data;\n\texport let yMax = null;\n\texport let yMin = 0;\n\texport let selected;\n\t\n\t$: yMin = yMin > 0 ? 0 : yMin;\n\n\tconst xKey = 'geocode';\n\tconst yKey = 'value';\n\t\n\tlet xDomain = [];\n\n\tdata.forEach(d => {\n\t\txDomain.push(d[xKey]);\n\t\td[yKey] = +d[yKey];\n\t});\n</script>\n\n<style>\n\t.chart-container {\n\t\twidth: 100%;\n\t\theight: 250px;\n\t\tmargin-top: 25px;\n\t}\n</style>\n\n<div class=\"chart-container\">\n\t<LayerCake\n\t\tpadding={{ top: 0, right: 0, bottom: 20, left: 20 }}\n\t\tx={xKey}\n\t\ty={yKey}\n\t\txScale={scaleBand()}\n\t  xDomain={xDomain}\n\t\tyDomain={[yMin, yMax]}\n\t\tdata={data}\n\t>\n\t\t<Svg>\n\t\t\t<Column\n\t\t\t\t{selected}\n\t\t\t/>\n\t\t\t<AxisY\n\t\t\t\tticks={4}\n\t\t\t/>\n\t\t</Svg>\n\t</LayerCake>\n</div>",
    "<script>\n\timport { getContext } from 'svelte';\n\n\tconst { data, xGet, yGet } = getContext('LayerCake');\n\n\texport let stroke = 'rgb(0, 97, 180)';\n\n\t$: path = 'M' + $data\n\t\t.map(d => {\n\t\t\treturn $xGet(d) + ',' + $yGet(d);\n\t\t})\n\t\t.join('L');\n</script>\n\n<path class='path-line' d='{path}' {stroke}></path>\n\n<style>\n\t.path-line {\n\t\tfill: none;\n\t\tstroke-linejoin: round;\n\t\tstroke-linecap: round;\n\t\tstroke-width: 3;\n\t}\n</style>",
    "<script>\n\t// \tNote: Due to REPL limitations, full responsiveness may not work here. Download the example from here or from the website (https://layercake.graphics/example/Line) and run locally to get all features.\n\t\n\timport { LayerCake, Svg } from 'layercake';\n\n\timport Line from './Line.svelte';\n\timport Area from './Area.svelte';\n\timport AxisX from './AxisX.svelte';\n\timport AxisY from './AxisY.svelte';\n\n\texport let data;\n\t\n\tconst formatTick = d => {\n\t\tlet tick = d > 10000000 ? Math.round(d / 1000000) + 'm' : d > 10000 ? Math.round(d / 1000) + 'k' : d;\n\t\treturn tick;\n\t};\n\n\tconst xKey = 'x';\n\tconst yKey = 'y';\n\t\n\tlet xTicks = [];\n\t\n\tdata.forEach(d => {\n\t\txTicks.push(d[xKey]);\n\t\td[yKey] = +d[yKey];\n\t});\n\n</script>\n\n<style>\n\t.chart-container {\n\t\twidth: 100%;\n\t\theight: 200px;\n\t\tmargin-top: 25px;\n\t}\n</style>\n\n<div class=\"chart-container\">\n\t<LayerCake\n\t\tpadding={{ right: 0, bottom: 20, left: 35 }}\n\t\tx={xKey}\n\t\ty={yKey}\n\t\tyDomain={[0, null]}\n\t\tdata={data}\n\t>\n\t\t<Svg>\n\t\t\t<AxisX\n\t\t\t\tticks={xTicks}\n\t\t\t/>\n\t\t\t<AxisY\n\t\t\t\tticks={3}\n\t\t\t\t{formatTick}\n\t\t\t/>\n\t\t\t<Line/>\n\t\t\t<Area/>\n\t\t</Svg>\n\t</LayerCake>\n</div>",
    "<style>\n\tmain {\n\t\tz-index: 1000;\n\t\twidth: 40%;\n\t\tposition: absolute;\n\t}\n\t@media (max-width: 600px) {\n\t\tmain {\n\t\t\twidth: 100%;\n\t\t}\n\t}\n</style>\n\n<main>\n\t<slot></slot>\n</main>",
    "<script>\n\timport { onMount } from 'svelte';\n\timport mapbox from 'mapbox-gl';\n\timport { mapObj } from './stores.js';\n\n\texport let location = {\n\t\tbounds: [[-5.816, 49.864], [1.863, 55.872]] // England & Wales bounding box\n\t};\n\texport let style;\n\t\n\tlet map;\n\tlet container;\n\tlet options;\n\t\n\tif (location.bounds) {\n\t\toptions = { bounds: location.bounds };\n\t} else if (location.lon && location.lat) {\n\t\toptions = {\n\t\t\tcenter: [location.lon, location.lat]\n\t\t}\n\t\tif (location.zoom) {\n\t\t\toptions.zoom = location.zoom;\n\t\t}\n\t};\n\n\tonMount(() => {\n\t\tconst link = document.createElement('link');\n\t\tlink.rel = 'stylesheet';\n\t\tlink.href = 'https://unpkg.com/mapbox-gl/dist/mapbox-gl.css';\n\n\t\tlink.onload = () => {\n\t\t\tmap = new mapbox.Map({\n\t\t\t\tcontainer,\n\t\t\t\tstyle: style,\n\t\t\t\tinteractive: false,\n\t\t\t\t...options\n\t\t\t});\n\t\t\tmapObj.set(map);\n\t\t};\n\n\t\tdocument.head.appendChild(link);\n\n\t\treturn () => {\n\t\t\tmap.remove();\n\t\t\tlink.parentNode.removeChild(link);\n\t\t};\n\t});\n</script>\n\n<style>\n\tdiv {\n\t\twidth: 60%;\n\t\theight: 100%;\n\t\tposition: fixed;\n\t\tright: 0;\n\t}\n\t@media (max-width: 600px) {\n\t\tdiv {\n\t\t\twidth: 100%;\n\t\t}\n\t}\n</style>\n\n<div bind:this={container}>\n\t{#if map}\n\t\t<slot></slot>\n\t{/if}\n</div>",
    "<script>\n\timport * as Pancake from '@sveltejs/pancake'; \n\timport { spring } from 'svelte/motion';\n\timport { onMount } from 'svelte';\n\t\n\texport let data;\n\texport let color = 'rgb(0, 97, 180)';\n\n\tconst age1 = Math.max(...data.map(d => d.age));\n\tconst year0 = Math.min(...data.map(d => d.year));\n\tconst year1 = Math.max(...data.map(d => d.year));\n\tconst max = Math.max(...data.map(d => d.people));\n\n\tconst birth_years = range(year0 - age1, year1, 10);\n\tconst ages = range(0, age1, 10);\n\n\tlet year = year1;\n\tlet el;\n\tlet w = 320;\n\n\tfunction range(a, b, step) {\n\t\tconst array = [];\n\t\tfor (; a <= b; a += step) array.push(a);\n\t\treturn array;\n\t}\n\n\tconst formatTick = d => {\n\t\tlet tick = d > 1000000 ? Math.round(d / 1000000) + 'm' : d > 1000 ? Math.round(d / 1000) + 'k' : d;\n\t\treturn tick;\n\t};\n\n\tfunction get_populations (year) {\n\t\treturn birth_years.map(birth_year => {\n\t\t\tconst d = selection.find(d => d.age === year - birth_year);\n\t\t\treturn {\n\t\t\t\tx: birth_year,\n\t\t\t\ty: d ? d.people : 0\n\t\t\t};\n\t\t});\n\t}\n\n\tconst x1 = spring();\n\tconst x2 = spring();\n\tconst values = spring();\n\n\t$: $x2 = year;\n\t$: $x1 = year - age1;\n\t$: selection = data.filter(d => d.year === year);\n\t$: $values = get_populations(year);\n\t$: size = w < 480 ? 'small' : w < 640 ? 'medium' : 'large';\n\n\tconst handle_pointerdown = e => {\n\t\tif (!e.isPrimary) return;\n\n\t\tconst start_x = e.clientX;\n\t\tconst start_value = year;\n\n\t\tconst handle_pointermove = e => {\n\t\t\tif (!e.isPrimary) return;\n\n\t\t\tconst d = e.clientX - start_x;\n\n\t\t\tconst step = Math.min(10, d > 0\n\t\t\t\t? (window.innerWidth - start_x) / (year1 - start_value)\n\t\t\t\t: start_x / (start_value - year0));\n\n\t\t\tconst n = Math.round(d / step);\n\t\t\tyear = Math.max(year0, Math.min(year1, start_value + Math.round(n * 0.1) * 10));\n\t\t};\n\n\t\tconst handle_pointerup = e => {\n\t\t\tif (!e.isPrimary) return;\n\n\t\t\twindow.removeEventListener('pointermove', handle_pointermove);\n\t\t\twindow.removeEventListener('pointerup', handle_pointerup);\n\t\t};\n\n\t\twindow.addEventListener('pointermove', handle_pointermove);\n\t\twindow.addEventListener('pointerup', handle_pointerup);\n\t};\n\n\tconst handle_resize = () => {\n\t\t// normally we'd just use bind:clientWidth={w} on the element,\n\t\t// but that fails in the REPL because of iframe restrictions\n\t\tw = el.clientWidth;\n\t};\n\n\tonMount(handle_resize);\n</script>\n\n<svelte:window on:resize={handle_resize}/>\n\n<div class=\"chart {size}\" bind:this={el}>\n\t<div class=\"background\">\n\t\t<Pancake.Chart x1=\"{$x1 - 5}\" x2=\"{$x2 + 5}\" y1={0} y2={max} clip>\n\t\t\t<!-- bars -->\n\t\t\t<Pancake.Columns data={$values} width={10}>\n\t\t\t\t<div class=\"column\" style=\"background-color: {color};\"></div>\n\t\t\t</Pancake.Columns>\n\t\t</Pancake.Chart>\n\t</div>\n\n\t<div class=\"foreground\">\n\t\t<Pancake.Chart x1=\"{age1 + 10}\" x2=\"{0}\" y1={0} y2={max}>\n\t\t\t<Pancake.Grid horizontal count={5} let:value let:first>\n\t\t\t\t<div class=\"grid-line horizontal\"></div>\n\t\t\t\t<span class=\"y label\">{formatTick(value)}</span>\n\t\t\t</Pancake.Grid>\n\n\t\t\t<Pancake.Grid vertical count=\"{size === 'large' ? 20 : 10}\" let:value>\n\t\t\t\t<span class=\"x label\">\n\t\t\t\t\t{value}\n\t\t\t\t\t{#if value === 0}<span style=\"position: absolute; left: 2.5em\">yrs</span>{/if}\n\t\t\t\t</span>\n\t\t\t</Pancake.Grid>\n\t\t</Pancake.Chart>\n\t</div>\n\n\t<div class=\"slider-container\">\n\t\t<!-- TODO this should be componentised, but there's a bug in Svelte that prevents it -->\n\t\t<!-- <NumberSlider min={year0} max={year1} step={10} bind:value={year}/> -->\n\t\t<button disabled=\"{year === year0}\" on:click=\"{() => year -= 10}\">&larr;</button>\n\t\t<span on:pointerdown={handle_pointerdown}>{year}</span>\n\t\t<button disabled=\"{year === year1}\" on:click=\"{() => year += 10}\">&rarr;</button>\n\t</div>\n</div>\n\n<style>\n\t.chart {\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\theight: 300px;\n\t\tmargin: 0 0 36px 5px;\n\t}\n\n\t.background, .foreground {\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tpadding: 3em 3em 2em 0;\n\t\tbox-sizing: border-box;\n\t}\n\n\t.slider-container {\n\t\tdisplay: flex;\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\tuser-select: none;\n\t\t-moz-user-select: none;\n\t\tcolor: #333;\n\t}\n\n\t.slider-container span {\n\t\tdisplay: block;\n\t\tfont-size: 2em;\n\t\ttext-shadow: 0 0 12px white, 0 0 12px white, 0 0 12px white, 0 0 12px white, 0 0 12px white, 0 0 12px white;\n\t\tcursor: ew-resize;\n\t}\n\n\t.slider-container button {\n\t\tbackground: none;\n\t\tborder: none;\n\t\tfont-size: 1.6em;\n\t\tmargin: 0;\n\t\tpadding: 0 0.2em;\n\t}\n\n\t.grid-line {\n\t\tposition: relative;\n\t\tdisplay: block;\n\t}\n\n\t.grid-line.horizontal {\n\t\twidth: 100%;\n\t\theight: 1px;\n\t\tleft: 0;\n    background-image: linear-gradient(to right, #aaa 50%, rgba(255, 255, 255, 0) 0%);\n    background-position: top;\n    background-size: 4px 1px;\n    background-repeat: repeat-x;\n\t}\n\n\t.label {\n\t\tposition: absolute;\n\t\tfont-size: 0.725em;\n\t\tcolor: #666;\n\t\tline-height: 1;\n\t\twhite-space: nowrap;\n\t}\n\n\t.y.label {\n\t\tleft: calc(100% + 1em);\n\t\tbottom: -0.5em;\n\t\tline-height: 1;\n\t}\n\n\t.x.label {\n\t\twidth: 4em;\n\t\tleft: -2em;\n\t\tbottom: 5px;\n\t\ttext-align: center;\n\t}\n\n\t.background .x.label {\n\t\tcolor: white;\n\t\tfont-size: 10px;\n\t}\n\n\t.foreground .x.label {\n\t\tbottom: -22px;\n\t}\n\n\t.column {\n\t\tposition: absolute;\n\t\t/* left: 1px;\n\t\twidth: calc(100% - 2px); */\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\tborder-left: 1px solid rgba(255,255,255,1);\n\t\tborder-right: 1px solid rgba(255,255,255,1);\n\t\tbox-sizing: border-box;\n\t\theight: 100%;\n\t\tborder-radius: 2px 2px 0 0;\n\t\topacity: 0.65;\n\t}\n\n\t.medium .slider-container span {\n\t\tfont-size: 2.5em;\n\t}\n\n\t.large .slider-container span {\n\t\tfont-size: 3.5em;\n\t}\n</style>",
    "<script>\n\texport let data = {};\n\texport let location = {\n\t\tbounds: [[-5.816, 49.864], [1.863, 55.872]] // England & Wales bounding box\n\t};\n\texport let dataset = null;\n\texport let type = 'section';\n\t\n\tdata.location = location;\n\tdata.dataset = dataset;\n\tdata.selected = false;\n</script>\n\n<style>\n\tsection, header {\n\t\tpadding: 10px 20px;\n\t\tmargin-bottom: 100vh;\n\t\tbackground-color: rgba(255, 255, 255, 0.8);\n\t}\n\t@media (min-width: 600px) {\n\t\tsection, header {\n\t\t\tmin-height: 100vh;\n\t\t\tmargin-bottom: 0;\n\t\t}\n\t}\n</style>\n\n{#if type == 'header'}\n<header bind:this={data.el} tabindex=\"0\">\n\t<h1>\n\t\t<slot name=\"title\">\n\t\t\t<span>No title</span>\n\t\t</slot>\n\t</h1>\n\t<slot name=\"description\">\n\t\t<span>No description</span>\n\t</slot>\n\t{#if false}<slot></slot>{/if}\n</header>\n{:else}\n<section bind:this={data.el} tabindex=\"0\">\n\t<h2>\n\t\t<slot name=\"title\">\n\t\t\t<span>No title</span>\n\t\t</slot>\n\t</h2>\n\t<slot name=\"description\">\n\t\t<span>No description</span>\n\t</slot>\n\t{#if false}<slot></slot>{/if}\n</section>\n{/if}"
  ],
  "names": [],
  "mappings": "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"
}